{"version":3,"sources":["./src/app/form-plan/form-plan.page.html","./src/app/Services/planes.service.ts","./src/app/form-plan/form-plan-routing.module.ts","./src/app/form-plan/form-plan.module.ts","./src/app/form-plan/form-plan.page.scss","./src/app/form-plan/form-plan.page.ts"],"names":[],"mappings":"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","file":"form-plan-form-plan-module.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title  size=\\\"small\\\">Agregar Plan</ion-title>    \\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  <form [formGroup]=\\\"datosForm\\\">\\n\\n    <div class=\\\"form-card\\\"> \\n      <ion-text color=\\\"primary\\\">\\n        <h4>Nombre *</h4>     \\n      </ion-text> \\n      \\n          \\n      <ion-item [class.invalid]=\\\"submitted && !datosForm.controls.nombre.valid\\\">\\n        <ion-input name=\\\"nombre\\\" type=\\\"text\\\" formControlName=\\\"nombre\\\" required></ion-input>\\n      </ion-item>\\n      <div *ngIf=\\\"submitted && f.nombre.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.nombre.errors.required\\\"><h5>Ingresa un nombre</h5></div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-card\\\">\\n      <ion-item [class.invalid]=\\\"submitted && !datosForm.controls.tipo.valid\\\" (ionChange)=\\\"tipoChange()\\\">  \\n        <ion-label position=\\\"floating\\\">Periodo</ion-label>                  \\n        <ion-select  formControlName=\\\"tipo\\\" value=\\\"datosForm.controls.tipo.value\\\">        \\n          <ion-select-option [value]=\\\"'mensual'\\\" selected>mensual</ion-select-option>\\n          <ion-select-option [value]=\\\"'anual'\\\" selected>anual</ion-select-option>\\n          <ion-select-option [value]=\\\"'dias'\\\" selected>dias</ion-select-option>\\n        </ion-select>        \\n      </ion-item>\\n      <div *ngIf=\\\"submitted && f.tipo.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.tipo.errors.required\\\"><h5>Seleccione un tipo</h5></div>\\n      </div>\\n    </div>\\n    \\n   \\n    <div class=\\\"form-card\\\" *ngIf=\\\"datosForm.controls.tipo.value == 'dias'\\\">\\n      <ion-text color=\\\"primary\\\">\\n        <h4>Cantidad de días *</h4>     \\n      </ion-text> \\n          \\n      <ion-item [class.invalid]=\\\"submitted && !datosForm.controls.dias.valid\\\">\\n        <ion-input name=\\\"dias\\\" type=\\\"number\\\" formControlName=\\\"dias\\\" required></ion-input>\\n      </ion-item>\\n      <div *ngIf=\\\"submitted && f.dias.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.dias.errors.required\\\"><h5>Ingresa una cantidad de días</h5></div>\\n      </div>\\n    </div>\\n    \\n    \\n    <div class=\\\"form-card\\\">\\n      \\n      <ion-text color=\\\"primary\\\">\\n        <h4>Precio * </h4>  \\n      </ion-text>  \\n      <ion-item [class.invalid]=\\\"submitted && !datosForm.controls.precio.valid\\\">\\n        <ion-input name=\\\"precio\\\" type=\\\"number\\\" formControlName=\\\"precio\\\" required></ion-input>\\n      </ion-item>\\n      <div *ngIf=\\\"submitted && f.precio.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.precio.errors.required\\\"><h5>Ingresa un precio</h5></div>\\n      </div>\\n    </div>\\n    \\n    <div class=\\\"form-card\\\" *ngIf=\\\"canEliminar\\\">\\n      <ion-text color=\\\"danger\\\">\\n        <h5 color=\\\"danger\\\">zona de riesgo</h5>\\n      </ion-text>      \\n      <ion-button  color=\\\"danger\\\" (click)=\\\"eliminar()\\\">Eliminar Plan</ion-button>\\n    </div>\\n\\n   \\n  </form>\\n  <ion-toolbar>\\n    <ion-button slot=\\\"end\\\" (click)=\\\"guardar()\\\">Guardar</ion-button>\\n    \\n    <ion-button slot=\\\"start\\\"  color=\\\"light\\\" (click)=\\\"cerrar()\\\">Cancelar</ion-button>\\n  </ion-toolbar>\\n</ion-content>\\n\\n\";","import { Injectable } from '@angular/core';\nimport { AngularFirestore } from 'angularfire2/firestore';\nimport { Plan } from '../models/plan';\nimport { BaseService } from './base.service';\nimport { ComerciosService } from './comercios.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlanesService extends BaseService{\n\n  private servicioId = \"\";\n  protected comercioId = \"\";\n\n  constructor(\n    protected afs: AngularFirestore,\n    private comerciosService:ComerciosService\n    ) {     \n      super(afs); \n      this.comerciosService.getSelectedCommerce().subscribe(data=>{\n        // let comercio_seleccionadoId = localStorage.getItem('comercio_seleccionadoId'); \n        if(data){\n         this.comercioId = data.id\n         }\n        \n      })\n  }\n  setPathIds(servicioId){\n    this.servicioId = servicioId;\n    console.log(\"comercios/\"+this.comercioId+\"/servicios/\"+this.servicioId+\"/planes\")\n    this.setPath(\"comercios/\"+this.comercioId+\"/servicios/\"+this.servicioId+\"/planes\");\n  }\n\n /* public set(data) { \n     \n\n    this.setPathIds(data.servicioId);\n\n    const param = JSON.parse(JSON.stringify(data));\n    let id =\"\"; //El id es el primer nombre! logica pensada para que reemplace al cambiarse el nombre del plan\n    if(param.id != \"\"){\n      id = param.id;\n    }\n    else{\n      id=param.nombre;\n    }\n    console.log(id);\n    console.log(param);\n    console.log(this.path)\n    this.afs.collection(this.path).doc(id).set(param).then(data=>{\n      console.log(\"!!!\")\n    });\n  }  */\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FormPlanPage } from './form-plan.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FormPlanPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class FormPlanPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { FormPlanPageRoutingModule } from './form-plan-routing.module';\n\nimport { FormPlanPage } from './form-plan.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    FormPlanPageRoutingModule\n  ],\n  declarations: [FormPlanPage]\n})\nexport class FormPlanPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Zvcm0tcGxhbi9mb3JtLXBsYW4ucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\nimport { PlanesService } from '../Services/planes.service';\nimport { Plan } from '../models/plan';\nimport { ToastService } from '../Services/toast.service';\n\n@Component({\n  selector: 'app-form-plan',\n  templateUrl: './form-plan.page.html',\n  styleUrls: ['./form-plan.page.scss'],\n})\nexport class FormPlanPage implements OnInit {\n\n  datosForm: FormGroup;\n  submitted = false;\n  public titulo =\"Nuevo Plan\";\n  public canEliminar = false;\n  public serviceId = \"\";\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private modalCtrl: ModalController,\n    private navParams:NavParams,\n    public alertController: AlertController,\n    public planesServices:PlanesService,\n    private toastServices:ToastService,\n  ) {\n\n\n\n    this.datosForm = this.formBuilder.group({\n      id:[''],\n      nombre: ['', Validators.required],\n      tipo :['', Validators.required],  \n      dias :[''],  \n      precio :['', Validators.required],      \n    });\n\n    \n    if(this.navParams.get('plan')){\n      this.datosForm.patchValue(this.navParams.get('plan'));\n      \n      if(this.navParams.get('plan').id)\n        this.canEliminar = true;\n      this.titulo = \"Editar Plan\";\n    }   \n\n    \n    \n\n    \n\n   }\n\n  ngOnInit() {\n  }\n\n  tipoChange(){\n    console.log(\"change\");\n    if(this.datosForm.controls.tipo.value == \"dias\"){\n      this.datosForm.controls.tipo.setValidators([Validators.required]);\n    }\n    else{\n      console.log(\"Dias no requerido\");\n      this.datosForm.controls.tipo.clearValidators();\n    }\n  }\n\n  get f() { return this.datosForm.controls; }\n\n  guardar(){\n\n    this.submitted = true; // stop here if form is invalid\n\n    if (this.datosForm.invalid) {\n      this.toastServices.alert('Por favor completar todos los campos marcados con * antes de continuar',\"\");\n      return;\n    } \n    this.modalCtrl.dismiss(this.datosForm.value);\n  }\n\n\n  cerrar(){\n    this.modalCtrl.dismiss(null);\n  }\n\n  async eliminar(){\n\n    const alert = await this.alertController.create({\n      header: 'Está seguro que desea eliminar el plan?',\n      message: 'Se perderán todos las subscripciones asociadas con el mismo.',\n      buttons: [\n        {\n          text: 'Cancelar',\n          handler: (blah) => {\n            \n          }\n        }, {\n          text: 'Eliminar',\n          handler: () => {      \n        \n              this.modalCtrl.dismiss('eliminar');\n          }\n        }\n      ]\n    });\n    await alert.present();\n\n    \n  }\n  \n}\n"],"sourceRoot":"webpack:///"}